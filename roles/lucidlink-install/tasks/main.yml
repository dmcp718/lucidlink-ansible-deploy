---
- name: Check if LucidLink is already installed
  stat:
    path: "{{ '/usr/bin/lucid2' if ll_version == '2' else '/usr/bin/lucid' }}"
  register: lucid_binary
  
- name: Set download URL based on version and OS
  set_fact:
    download_url: >-
      {% if ll_version == "2" %}
        {% if ansible_distribution == "Ubuntu" %}
        https://www.lucidlink.com/download/latest/lin64/stable/
        {% else %}
        https://www.lucidlink.com/download/latest/lin64-rpm/stable/
        {% endif %}
      {% else %}
        {% if ansible_distribution == "Ubuntu" %}
        https://www.lucidlink.com/download/new-ll-latest/linux-deb/stable/
        {% else %}
        https://www.lucidlink.com/download/new-ll-latest/linux-rpm/stable/
        {% endif %}
      {% endif %}
    package_ext: "{{ 'deb' if ansible_distribution == 'Ubuntu' else 'rpm' }}"

- name: Download LucidLink installer
  get_url:
    url: "{{ download_url }}"
    dest: "/tmp/lucidinstaller.{{ package_ext }}"
    mode: '0644'
    headers:
      Referer: ";auto"
  when: not lucid_binary.stat.exists
  register: download_result

- name: Install LucidLink (DEB)
  apt:
    deb: "/tmp/lucidinstaller.deb"
    state: present
  when: 
    - not lucid_binary.stat.exists
    - ansible_distribution == "Ubuntu"
    - download_result is success

- name: Install LucidLink (RPM)
  yum:
    name: "/tmp/lucidinstaller.rpm"
    state: present
  when: 
    - not lucid_binary.stat.exists
    - ansible_distribution != "Ubuntu"
    - download_result is success

- name: Clean up installer
  file:
    path: "/tmp/lucidinstaller.{{ package_ext }}"
    state: absent
  when: download_result is success

- name: Create lucidlink group
  group:
    name: lucidlink
    state: present

- name: Create lucidlink user
  user:
    name: lucidlink
    group: lucidlink
    system: yes
    create_home: yes
    shell: /bin/bash

- name: Add lucidlink user to sudoers
  copy:
    content: "lucidlink ALL=(ALL) NOPASSWD:ALL"
    dest: /etc/sudoers.d/lucidlink
    mode: '0440'

- name: Create required directories
  file:
    path: "{{ item }}"
    state: directory
    owner: lucidlink
    group: lucidlink
    mode: '0700'
  loop:
    - /client/lucid
    - "{{ ll_mount_point }}"
    - "{{ ll_cache_location }}"

- name: Create environment file
  template:
    src: lucidlink-service-vars.txt.j2
    dest: /client/lucid/lucidlink-service-vars.txt
    owner: lucidlink
    group: lucidlink
    mode: '0600'

- name: Create temporary password file
  copy:
    content: "{{ ll_password | trim | b64encode }}"
    dest: /tmp/lucidlink-password1.txt
    mode: '0600'
  no_log: true

- name: Store and encrypt LucidLink password
  shell: |
    echo -n "{{ ll_password | trim }}" | systemd-creds encrypt - /client/lucid/ll-password-1.cred --name=ll-password-1
  no_log: true

- name: Set password file permissions
  file:
    path: /client/lucid/ll-password-1.cred
    owner: lucidlink
    group: lucidlink
    mode: '0400'

- name: Configure fuse
  lineinfile:
    path: /etc/fuse.conf
    regexp: '^#user_allow_other'
    line: 'user_allow_other'

- name: Create systemd service file
  template:
    src: lucidlink.service.j2
    dest: /etc/systemd/system/lucidlink.service
    mode: '0644'
  notify: reload_systemd

- name: Enable and start LucidLink service
  systemd:
    name: lucidlink
    state: started
    enabled: yes
    daemon_reload: yes
  when: ll_version == "2"
