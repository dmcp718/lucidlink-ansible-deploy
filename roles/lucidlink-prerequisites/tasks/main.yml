---
- name: Get system memory
  setup:
    filter: ansible_memtotal_mb
  tags: ['health-check']

- name: Get available disk space
  shell: df --output=avail -B 1 {{ ll_cache_location | dirname }} | tail -n 1
  register: available_space
  changed_when: false
  tags: ['health-check']

- name: "Verify system meets requirements"
  assert:
    that:
      - "ansible_memtotal_mb|int >= 2048"  # 2GB RAM minimum
      - "available_space.stdout|int >= 5368709120"  # 5GB minimum
    fail_msg: "System does not meet minimum requirements: 2GB RAM and 5GB free space"
  tags: ['health-check']

- name: Debug OS info
  debug:
    msg: "Distribution: {{ ansible_distribution }}, Version: {{ ansible_distribution_version }}, Major: {{ ansible_distribution_major_version }}"

- name: Set OS-specific variables
  set_fact:
    os_type: "{% if ansible_distribution == 'Ubuntu' %}ubuntu{% elif ansible_distribution == 'Amazon' %}amazon_linux_2023{% else %}unknown{% endif %}"

- name: Debug OS type
  debug:
    msg: "Detected OS type: {{ os_type }}"

- name: Set package lists
  set_fact:
    os_packages:
      ubuntu:
        - fuse
        - curl
        - python3
        - python3-pip
        - python3-dev
        - build-essential
      amazon_linux_2023:
        - fuse
        - curl
        - python3
        - python3-pip
        - python3-devel
        - gcc

- name: Debug package list
  debug:
    msg: "Package list for {{ os_type }}: {{ os_packages[os_type] }}"
      
- name: Install required packages
  dnf:
    name: "{{ os_packages[os_type] }}"
    state: present
  register: package_install
  retries: 3
  delay: 5
  until: package_install is success
  when: ansible_distribution == 'Amazon'
  
- name: Install required packages (Ubuntu)
  package:
    name: "{{ os_packages[os_type] }}"
    state: present
  register: package_install
  retries: 3
  delay: 5
  until: package_install is success
  when: ansible_distribution == 'Ubuntu'
  
- name: Create required directories
  file:
    path: "{{ item }}"
    state: directory
    mode: '0755'
  loop:
    - "{{ ll_mount_point }}"
    - "{{ ll_cache_location }}"
  register: dir_creation
  
- name: Set up logging directory
  file:
    path: /var/log/lucidlink-ansible-deploy
    state: directory
    mode: '0755'
    
- name: Configure system limits
  pam_limits:
    domain: '*'
    limit_type: "{{ item.type }}"
    limit_item: "{{ item.item }}"
    value: "{{ item.value }}"
  loop:
    - { type: 'soft', item: 'nofile', value: '65535' }
    - { type: 'hard', item: 'nofile', value: '65535' }
  notify: reload_limits
